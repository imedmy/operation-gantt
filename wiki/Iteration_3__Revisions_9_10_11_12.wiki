*Iteration 2*

For the second iteration the intention as stated in the Analysis  Document was to implement the following:
  # User Story 7: Add New Summary Task
  # User Story 8: Edit Existing Summary Task
  # User Story 9: Save and Logout
  # User Story 10: Save and Create New Project
----
User Stories 7 and 8 were successfully implemented in this iteration. This was achieved through the following steps:

----
* 1.  Clean up previous source code:
 *   Project was reconstructed from beginning. The Ado.Net Entity Data Model replaced the NuGet 3rd party software previously used. This made the code cleaner and smaller. 

 *   Reconstructed JQuery datepicker. Previously had two methods combined and only 1 worked. Rebuilt just 1 method so code is now cleaner and smaller.	
----
* 2.   Set up a Database Manager Model:
 * The new model contained 3 essential methods:
   # RowNoRetrieval
   # RowSortPreInsert
   # RowSortAfterDelete

 * 1. RowNoRetrieval is called when creating a new task. First a query is sent to the database to find the last existing row id and then the new task is given the next ascending row id.
 * 2. RowSortPreInsert is called if a user wants to put a new task in a row id other than the last row. This method is called when "Insert" is selected. Tasks are renumbered to create a space within the database list for the new task before it is created.
 * 3. RowSortAfterDelete is called upon after a task is deleted. It will renumber all tasks so all row ids are in sequence and have no gaps after a task delete.
----
3. Add a web role:
  *	A web role was added to the project before being packaged and launched on azure cloud. 
URL: http://roisinsfavouriteproject.cloudapp.net/
----
4. Connect Gantt Chart creator to the database:
  *     This was achieved by creating a 4th method in the "DatabaseManager" model called "GetDatabaseTasks" which pulls the list of tasks from the database and sends them to the chart controller. The chart controller then uses another foreach loop to split the list into its seperate elements so they can be added to the chart.
----
5. Extended SQL table
  *	An extra column was added to the task table called Indent_Counter. This was an integer variable that helps record a task as either a summary task or a subtask and assists with the tab positioning of this task in both the task list and gantt chart. 
----
6. Added functionality to create Subtasks and Summary Tasks
  *     This was achieved by creating 2 action results in the Task controller called "TabLeft" and "TabRight" as well as extending the functionality within the DatabaseManager model by extending the GetDatabaseTasks method and adding a TrimEnding method. Together they can change tasks into summary or subtasks or vice versa. Boundary limits exist in these methods so a subtask can only indent by 1 at each root change. To manage these tabs/spaces it was necessary to insert a PRE wrapper to preserve this spacing in Html. Additional spacing was also created after each task name in order to align tasks within the chart creator itself. 
----
7. Assign Summary Task Dates
  *	For Revision 8 the main task achieved was to extract the minimum start time and maximum end time from all subtasks and insert them into the corresponding summary tasks. This had to work for multiple subtask layers. Currently the code allows for infinite subtask layers. This code was placed in a new method called AssignSummaryDates within the DatabaseManager.cs model file.
----
8. Minor Alterations
  *     The X - axis labels were changed to better display each monthly breakdown of tasks using a custom label in the gantt chart display.
----
User Stories 9 and 10 were not implemented in this iteration as intended due to the large time over-run in getting the AssignSummaryDates method implemented. These will now be implemented in the next iteration.
------
------
------
*Revision 9*

For Revision 9 the 2 main tasks achieved were to improve the display problem of the text alignment in the chart tab and also to get rid of several bugs in the code.
  
----
* 1. Improve Text Alignment Display in Chart Tab	

Originally the code was counting the number of characters for each task and adding white spacing as required which proved inadequate as some characters took up more space on the screen than others. This made it necessary to find an alternative method of calculating string width which was found using an image width measurement built in method called "drawgraphics.measurestring". This method was put into a purpose built method that also converted each string into a bitmap image prior to calculating the pixel width and returning each value to the calling method.

In summary it involved replacing the "GetDatabaseTasks" method in the "DatabaseManager" controller with 3 new methods:
 # The first method was called "GetTasksToIndex" and simply only has to worry about the prespace in the Tasks tab index page which was working fine anyway but is now cleaner and simpler. This method gets away with counting the number of characters the old way because it only works with the Index page in the Task tab.
 # The second method created was called "GetTasksToChart" which deals with the text alignment in the Chart page and also calls on the third method to calculate the image pixel width of each         string.
 # The third method created was called "MeasureText" which essentially converts each task name into an image and calculates how many pixel widths this task occupies on screen. It then sends this information back to the second method where the post spacing is added to the task name before sending to the chart. 
----
* 2. Debugging

The following is a list of bugs that were fixed:

 # The delete method now only allows deletion of Summary Tasks when all SubTasks are deleted first.
 # The insert method gives the same indent counter value to the new task to ensure existing subtask groupings are not split into 2 groups.    
 # The summary task is now able to increase/decrease in size when subtasks are edited (Previously only increased).
 # The summary task method "AssignSummaryDates" is now called upon for deletions, insertions and edits.          
 # TabLeft and TabRight can now only be called upon if the task is not linked with any summary task/subtask groupings.
----